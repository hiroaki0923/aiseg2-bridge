#!/bin/bash
#
# Git pre-commit hook to run linting and formatting checks
# on Python files in the custom_components directory
#

# Enable strict error handling
set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if we have any staged Python files in custom_components
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^custom_components/.*\.py$" || true)

if [[ -z "$PYTHON_FILES" ]]; then
    echo -e "${BLUE}‚ÑπÔ∏è  No Python files in custom_components to check${NC}"
    exit 0
fi

echo -e "${BLUE}üîç Running pre-commit checks on Python files...${NC}"
echo "Files to check:"
for file in $PYTHON_FILES; do
    echo "  - $file"
done
echo ""

# Track if we have any failures
HAS_ERRORS=0

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run a check and report results
run_check() {
    local tool_name="$1"
    local command="$2"
    local description="$3"
    
    echo -e "${BLUE}Running $description...${NC}"
    
    if eval "$command"; then
        echo -e "${GREEN}‚úÖ $tool_name: Passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $tool_name: Failed${NC}"
        HAS_ERRORS=1
        return 1
    fi
}

# Check for basic Python syntax errors
echo -e "${BLUE}Checking Python syntax...${NC}"
for file in $PYTHON_FILES; do
    if ! python3 -m py_compile "$file"; then
        echo -e "${RED}‚ùå Syntax error in $file${NC}"
        HAS_ERRORS=1
    fi
done

if [[ $HAS_ERRORS -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ Python syntax: All files passed${NC}"
fi

# Check for common Python issues using basic tools
if command_exists flake8; then
    # Create a file list for flake8
    FILE_LIST=""
    for file in $PYTHON_FILES; do
        FILE_LIST="$FILE_LIST $file"
    done
    run_check "flake8" "flake8 --select=E9,F63,F7,F82 $FILE_LIST" "critical error checking with flake8"
elif command_exists python3; then
    # Basic import check
    echo -e "${BLUE}Running basic import checks...${NC}"
    for file in $PYTHON_FILES; do
        # Check for undefined variables (basic check)
        if python3 -c "
import ast
import sys

def check_file(filename):
    try:
        with open(filename, 'r') as f:
            content = f.read()
        ast.parse(content, filename)
        return True
    except SyntaxError as e:
        print(f'Syntax error in {filename}: {e}')
        return False
    except Exception as e:
        print(f'Error checking {filename}: {e}')
        return False

if not check_file('$file'):
    sys.exit(1)
"; then
            echo -e "${GREEN}‚úÖ Basic checks for $file: Passed${NC}"
        else
            echo -e "${RED}‚ùå Basic checks for $file: Failed${NC}"
            HAS_ERRORS=1
        fi
    done
fi

# Check for Home Assistant specific patterns
echo -e "${BLUE}Checking Home Assistant patterns...${NC}"
for file in $PYTHON_FILES; do
    # Check for proper async/await usage in HA integrations
    if grep -q "def.*async" "$file" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found 'def.*async' in $file - should be 'async def'${NC}"
    fi
    
    # Check for proper logging import
    if grep -q "_LOGGER\." "$file" && ! grep -q "import logging" "$file" && ! grep -q "_LOGGER = logging.getLogger" "$file"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Using _LOGGER without proper logging setup in $file${NC}"
    fi
    
    # Check for proper exception handling in async functions
    if grep -q "async def.*update\|async def.*fetch" "$file" && ! grep -q "except.*Exception" "$file"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Async data fetch methods should have exception handling in $file${NC}"
    fi
done

# Check manifest.json if it's been modified
MANIFEST_FILE="custom_components/aiseg2_bridge/manifest.json"
if git diff --cached --name-only | grep -q "$MANIFEST_FILE"; then
    echo -e "${BLUE}Validating manifest.json...${NC}"
    
    if command_exists jq; then
        if jq . "$MANIFEST_FILE" > /dev/null; then
            echo -e "${GREEN}‚úÖ manifest.json: Valid JSON${NC}"
            
            # Check required fields
            REQUIRED_FIELDS="domain name version documentation issue_tracker requirements codeowners"
            for field in $REQUIRED_FIELDS; do
                if ! jq -e ".$field" "$MANIFEST_FILE" > /dev/null; then
                    echo -e "${RED}‚ùå manifest.json: Missing required field '$field'${NC}"
                    HAS_ERRORS=1
                fi
            done
        else
            echo -e "${RED}‚ùå manifest.json: Invalid JSON${NC}"
            HAS_ERRORS=1
        fi
    elif command_exists python3; then
        if python3 -c "
import json
try:
    with open('$MANIFEST_FILE', 'r') as f:
        json.load(f)
    print('Valid JSON')
except json.JSONDecodeError as e:
    print(f'Invalid JSON: {e}')
    exit(1)
"; then
            echo -e "${GREEN}‚úÖ manifest.json: Valid JSON${NC}"
        else
            echo -e "${RED}‚ùå manifest.json: Invalid JSON${NC}"
            HAS_ERRORS=1
        fi
    fi
fi

echo ""
if [[ $HAS_ERRORS -eq 0 ]]; then
    echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}üí• Some pre-commit checks failed!${NC}"
    echo -e "${YELLOW}üí° Tips:${NC}"
    echo -e "  - Fix syntax errors and try again"
    echo -e "  - Install flake8 for better linting: pip install flake8"
    echo -e "  - Install jq for JSON validation: brew install jq (macOS) or apt-get install jq (Linux)"
    echo -e "  - Run 'git commit --no-verify' to skip these checks (not recommended)"
    exit 1
fi